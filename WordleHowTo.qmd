---
title: "WordleHowTo"
format: html
editor: visual
---

# How to Code and Play Wordle in R

## Work Flow

In order to play wordle, we need to.....

1.  Load in a data set of words and narrow it down to only words which have 5 letters

2.  Randomly pick one of those words to be our answer (solution)

3.  Allow the user to enter a guess at most 6 times

4.  Have a way for R to provide the user all 26 letters of the alphabet, evaluate each guess, provide feedback on the guess, and then return a an updated list of letters the user has not tried yet which the user can pick from for future guesses

5.  A way for the game to end if the user either gets the correct answer or runs out of chances to guess. If the user runs out of chances, the code will inform the user they lost and what the correct answer was.

## Preliminaries

Before begining, we need the right tools for the job which in this case are the packages {tidyverse} and {sjmisc}

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(sjmisc)
```

## Load in Data

We will need to large data sets to do this project, those being collins-scrabble-words-2019 and google-10000-english-usa-no-swears. To load then in, I will create a function called load_dictionary() which will take one argument (the name of the data set in the working directory). Additionally, in order to remove duplicate words, I will use the intersect() function to create a new list (solution_list) without duplicates

```{r}
load_dictionary <- function(x) {
  name <- read.table(x, header = TRUE)
}
f1 <- "https://raw.githubusercontent.com/difiore/ada-datasets/refs/heads/main/collins-scrabble-words-2019.txt"
valid_list <- load_dictionary(f1)
#starts at 9884 obervations
f2 <- "https://raw.githubusercontent.com/difiore/ada-datasets/refs/heads/main/google-10000-english-usa-no-swears.txt"
solution_list <- load_dictionary(f2)
str(valid_list)
str(solution_list)


solution_list <- intersect(valid_list, solution_list) #brings it down to 8336 obs
```

The collins-scrabble-words-2019 (valid_list) has a total of 279,496 words, of these 12,972 are 5-letter words

The google-10000-english-usa-no-swears (solution_list) has a total of 9,884 words, of these 1,210 are 5-letter words

By using the intersect() function to ensure that the list of words is made of only of words present in path lists, we narrow down out list of total words to 8,336 words., of which 1,210 are 5-letter words.

## Pick A Solution

Next we need to create a function which will go through a data set and randomly select one observation. For the purposes of the game, we need it to be a 5 letter word. This function will take a single argument which will be the list of possible solutions we created earlier. The result of this function being ran will be stored in a variable (solution) we will use later.

```{r}
#this function picks a random word from the list that is 5 characters long
pick_solution <- function(x){
  d <- x |> filter(str_length(x[,1]) == 5) #filters for 5 letter words
  w <- sample(as.character(d[,1]), 1) #selects a random word from the data
  w <- str_split_1(w, "") #splits the word into a single character vector
  return(w)
}

#this variable applies the function to the solution list to store 1 word as a 5 character vector
solution <- pick_solution(solution_list)
```

## Create Game Play Functions

We now have our answer to the game, but we still need a way for the user to play the Wordle. We will create 2 functions, one called play_wordle() to play the Wordle, and other called evaluate_guess() which will be nested within play_wordle() to evaluate the users guess against the solution. First we will create the evaluate_guess() function

The evaluate_guess() function needs to take 2 arguments, the users guess and the solution to the Wordle. The function will take the users guess, ensure it is in all caps, split it into a 5 character vector and represent each character as "-". The, using a for() loop, the function will as if a character in the guess is also in the solution,. If the answer to this is false, the character will remain "-". But, if a character in the guess is in the solution but a different position, it will be changed to a "+". Finally, if the character in the guess is in the solution and the correct position, it will be changed to a "\*"

```{r}
#this function will be called in the play_wordle function to evaluate the users guess
evaluate_guess <- function(guess, solution){
  guess <- toupper(guess) #makes sure guess is in all caps
  guess <- str_split_1(guess, "") #splits the guess into a 5 character vector
  e <- rep("-", 5) #stores the feedback of each letter, initially as "-"
  for(i in 1:5){ #for loop determining feedback for each of the 5 characters
    if(guess[i] %in% solution == F){} #if character is not in solution, do nothing
    else{ if (guess[i] != solution[i]) {e[i] = "+"} #if character is in solution but wrong position, change to "+"
      else{e[i] = "*"}} #if character is in solution and correct position, change to "*"
  }
  e <- paste(e) #updates e to be combination of "-" "+" "*"
  return(e)
}
```

Now, we will create the function which allows the user to play Worlde. This function has 3 arguments, the solution to the Wordle, the list of possible solutions, and the number of guesses the user is allowed to use. The function first creates a field of upper case letters A through Z. Then a while loop is set up to run as long as the users number of guesses is less than 6 (num_guesses). The user is prompted to enter a guess which is checked to see if it is (A) 5 letters long and (B) a valid guess in the solution_list. The evaluate_guess function is then called to determine how the users guess compares to the solution. The users guess is then printed above the feedback from the evaluate_guess function. If the answer is correct, the user is told they completed the Wordle and told how many guesses it took them. If the guess does not match the solution, the user if prompted to guess again with a list of letters they have not tried yet. If the user runs out of guesses, they are told they lost and given the correct answer.

```{r}
#this is the function for playing worlde
play_wordle <- function(solution, solution_list, num_guesses=6){
  print(paste("Welcome to Wordle. You have", num_guesses, "chances to guess the 5-letter word"))
  #Start guessing
  guessNum <- 0
  lettersLeft <- toupper(LETTERS) #sets up list of letters
  feedbackHist <- c() #this vector stores each evaluation created by the evaluate_guess function
  #this loop runs as long as the number of guesses entered is less than the number of guesses allowed by the game
  while(guessNum < num_guesses) {
    #show letters left
    print(paste(c("Letters left: ", lettersLeft), collapse = " "))
    
    #user adds a guess and the number of guesses is updated 
    guessNum <- guessNum + 1
    guess <- readline(paste0("Enter guess ", guessNum, ": "))
    guess <- toupper(guess)
    while(nchar(guess) != 5){ #guess is checked to make sure it has 5 letters, if not the user ir prompted to try again
      guess <- readline(paste0("Your guess must have 5 letters. Try again: "))
    }
    # Check if the guess is in the solution list
    while (toupper(guess) %in% solution_list[,1] == F) {  #guess is checked to make sure it is in the solution list, if not the user is prompted to try again
      guess <- readline("This guess is not in the list of possible guesses. Try again: ")
    }
    #evaluate function is called
    evalGuess <- evaluate_guess(guess, solution)
    feedbackHist <- c(feedbackHist, paste("Guess", guessNum, ":", guess, paste(evalGuess, collapse = ""), "; ")) #stores each guess number, the users
    #guess, and the evaluation of the guess. This then adds it to the initial feedbackHist variable to be called on later
    guessSplit <- str_split_1(guess, "")
    guessSplit <- toupper(guessSplit) #the guess is split and capitalized so that it matches the formatting of the letters
    #the list of letters is reduced to show what letters the user has not used
    lettersLeft <- setdiff(lettersLeft, guessSplit)
    guess <- toupper(guess) #double checking the guess is capitalized
    #the users guess is printed above the evaluation
    print(paste(strsplit(guess, "")[[1]], collapse = " "))
    print(paste(evalGuess, collapse = " "))
    
     if(all(evalGuess == "*")) { #if the guess is correct, the user is told and then given their feedback history
      print("Yay! You solved the wordle!")
      print(paste("You got the answer in ", guessNum, "guesses! Below is your guess history:"))
      print(paste(feedbackHist, collapse = " "))
      return(print(paste("Congratulations on getting today's wordle!")))
    }
  }
  #if the user runs out of guesses, they are told they lost, what the solution was, and their total feedback history
  print(paste("You ran out of guesses! The correct answer was", paste(solution, collapse = "")))
  print(paste(feedbackHist, collapse = ""))
  return(print("Better luck next time!"))
}
```

## Playing The Game

In order to play the game, the user runs this line of code which calls the play_wordle function with all the necessary arguments.

```{r}
#| eval: false

Wordle <- play_wordle(solution, solution_list, num_guesses = 6)
```

Here is a picture of an example output from my R console window

![](images/clipboard-2901781207.png)
